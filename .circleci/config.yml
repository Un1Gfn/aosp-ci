# https://github.com/Un1Gfn/avx/blob/master/.circleci/config.yml

version: 2

jobs:

  build:

    # https://circleci.com/docs/2.0/configuration-reference/#branches
    branches:
      only:
        - download
        - build-A
        - build-B
        # - placeholder

    # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
    # Xenial Xerus
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: false

    resource_class: medium

    steps:

      - run:
          name: "Remove bloat"
          working_directory: /opt/
          command: |
            sudo rm -rf firefox
            sudo rm -rf google/chrome
            sudo rmdir google
            sudo rm -rf circleci/.nvm
            sudo rm -rf circleci/.rvm
            sudo rm -rf circleci/.pyenv
            sudo rmdir circleci
            sudo rm -rf containerd

      - run:
          name: "BASH_ENV"
          command: |
            cat <<"EOF" >"$BASH_ENV"
            #
            export apt="sudo -i apt-get -q --allow-downgrades --allow-remove-essential --allow-change-held-packages --allow-unauthenticated"
            # export apt="sudo -i apt-get -q --allow-downgrades --allow-remove-essential --allow-change-held-packages"
            #
            # export _JAVA_OPTIONS="-Xmx$RAM"
            #
            EOF
            source "$BASH_ENV"

      # https://packages.ubuntu.com/
      # git repo time inetutils rxvt-unicode-terminfo openssh sudo
      # wget tree nano vim pv xz unzip
      # https://source.android.com/setup/build/initializing#installing-required-packages-ubuntu-1404
      # https://android.googlesource.com/platform/build/+/master/tools/docker/Dockerfile
      - run:
          name: "apt"
          command: |
            sudo -i apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 78BD65473CB3BD13
            sudo -i apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5DC22404A6F9F1CA
            $apt update
            $apt autoremove --purge
            cat <<"EOF" | xargs $apt install
            tree duc vim
            git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip
            EOF

      - run:
          name: "Verify J*8"
          command: |
            dpkg -l | grep openjdk-8-jdk
            javac -version |& grep -F '1.8.'
            [ "$(java -version |& grep -F '1.8.' | wc -l)" -eq 2 ]

      # File "build/tools/merge-event-log-tags.py", line 51
      #   except getopt.GetoptError, err:
      # SyntaxError: invalid syntax
      - run:
          name: "Kill python3 and keep python 2"
          command: |
            for py in \
              {lib,}python3{,.5}{,-stdlib,-minimal}
            do
              $apt purge "$py" || true
            done
            $apt autoremove --purge
            python2 --version |& grep -Fe 'Python 2.7'
            python  --version |& grep -Fe 'Python 2.7'
            ! sh -c "python3 --version"
            [ -z "$(dpkg -l | grep python3)" ]

      - run:
          name: "[A] Disk usage (approx 5G)"
          command: |
            echo
            sudo -i df -h
            echo
            echo

      - restore_cache:
          key: v1-incomplete-

      - run:
          name: "[B] Disk usage"
          command: |
            echo
            sudo -i df -h
            echo
            echo

      # https://source.android.com/setup/build/running#selecting-device-build
      - run:
          name: "Proceed w/ build"
          working_directory: /home/circleci/aosp/
          command: |
            cat <<"---" >./m.sh
            #!/bin/bash
            source build/envsetup.sh
            lunch aosp_angler-userdebug
            [ -z ${TOP+x} ] || exit 1
            m droid
            ---
            chmod +x m.sh
            ./m.sh

      - run:
          name: "[C] Disk space"
          command: |
            echo
            sudo -i df -h
            echo
            echo

      - run:
          name: "Wait for SSH"
          when: always
          command: |
            echo
            i=0
            while true; do
              sleep 60
              i=$((i+1))
              echo "$i min"
            done
            /usr/bin/false

      # https://stackoverflow.com/questions/36949605/creating-flashable-zip-from-android-source-code
      - run:
          name: "Generate images"
          working_directory: /home/circleci/aosp/
          command: |
            echo
            ls -lh dist_output/
            echo
            ls -lh dist_output/*target_files*
            echo
            ./build/tools/releasetools/ota_from_target_files
            echo
            echo

      # https://circleci.com/docs/2.0/artifacts/#artifacts-overview
      - store_artifacts:
          path: /nproc
      - store_artifacts:
          path: /lscpu
